import React, { useState } from 'react';
import { Info, X, Award, Star, Lock } from 'lucide-react';

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon_name: string;
  required_action: string;
  required_count: number;
}

interface Title {
  id: string;
  name: string;
  description: string;
  required_achievement_id: string;
}

interface AchievementRequirementsProps {
  achievements: Achievement[];
  titles: Title[];
  userAchievements: any[];
  userTitles: any[];
}

const AchievementRequirements: React.FC<AchievementRequirementsProps> = ({
  achievements,
  titles,
  userAchievements,
  userTitles
}) => {
  const [isOpen, setIsOpen] = useState(false);

  const getActionDescription = (action: string, count: number) => {
    switch (action) {
      case 'create_post':
        return `–°–æ–∑–¥–∞–π—Ç–µ ${count} ${count === 1 ? '–ø–æ—Å—Ç' : count < 5 ? '–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–æ–≤'}`;
      case 'create_comment':
        return `–û—Å—Ç–∞–≤—å—Ç–µ ${count} ${count === 1 ? '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : count < 5 ? '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' : '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}`;
      case 'receive_post_like':
        return `–ü–æ–ª—É—á–∏—Ç–µ ${count} ${count === 1 ? '–ª–∞–π–∫' : count < 5 ? '–ª–∞–π–∫–∞' : '–ª–∞–π–∫–æ–≤'} –Ω–∞ –ø–æ—Å—Ç–∞—Ö`;
      case 'receive_comment_like':
        return `–ü–æ–ª—É—á–∏—Ç–µ ${count} ${count === 1 ? '–ª–∞–π–∫' : count < 5 ? '–ª–∞–π–∫–∞' : '–ª–∞–π–∫–æ–≤'} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö`;
      case 'give_like':
        return `–ü–æ—Å—Ç–∞–≤—å—Ç–µ ${count} ${count === 1 ? '–ª–∞–π–∫' : count < 5 ? '–ª–∞–π–∫–∞' : '–ª–∞–π–∫–æ–≤'}`;
      case 'scan_plant':
        return `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${count} ${count === 1 ? '—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' : count < 5 ? '—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' : '—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'} —Ä–∞—Å—Ç–µ–Ω–∏–π`;
      case 'chatbot_message':
        return `–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${count} ${count === 1 ? '—Å–æ–æ–±—â–µ–Ω–∏–µ' : count < 5 ? '—Å–æ–æ–±—â–µ–Ω–∏—è' : '—Å–æ–æ–±—â–µ–Ω–∏–π'} —á–∞—Ç-–±–æ—Ç—É`;
      case 'daily_login':
        return `–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É ${count} ${count === 1 ? '–¥–µ–Ω—å' : count < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –ø–æ–¥—Ä—è–¥`;
      default:
        return `–í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ "${action}" ${count} —Ä–∞–∑`;
    }
  };

  const getIconComponent = (iconName: string) => {
    switch (iconName) {
      case 'edit': return <Award className="text-blue-500\" size={16} />;
      case 'message-circle': return <Award className="text-green-500" size={16} />;
      case 'thumbs-up': return <Award className="text-purple-500" size={16} />;
      case 'heart': return <Award className="text-red-500" size={16} />;
      case 'search': return <Award className="text-yellow-500" size={16} />;
      default: return <Award className="text-gray-500" size={16} />;
    }
  };

  const isAchievementUnlocked = (achievementId: string) => {
    return userAchievements.some(ua => ua.achievement_id === achievementId);
  };

  const isTitleUnlocked = (titleId: string) => {
    return userTitles.some(ut => ut.title_id === titleId);
  };

  const getRequiredAchievement = (titleRequiredAchievementId: string) => {
    return achievements.find(a => a.id === titleRequiredAchievementId);
  };

  const specialTitles = ['–¢–æ–ª—Å—Ç—ã–π –ê–ª—Ö–∏–º–∏–∫', '–¢–æ–∫–∞–µ–≤'];

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="flex items-center space-x-2 px-3 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors text-sm"
      >
        <Info size={16} />
        <span>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
      </button>

      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
              <h2 className="text-2xl font-bold">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ç–∏—Ç—É–ª—ã</h2>
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-500 hover:text-gray-700 transition-colors"
              >
                <X size={24} />
              </button>
            </div>

            <div className="p-6 space-y-8">
              {/* Achievements Section */}
              <div>
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <Award className="mr-2 text-yellow-500" size={24} />
                  –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {achievements.map((achievement) => {
                    const isUnlocked = isAchievementUnlocked(achievement.id);
                    return (
                      <div
                        key={achievement.id}
                        className={`p-4 rounded-lg border ${
                          isUnlocked
                            ? 'border-green-500 bg-green-50'
                            : 'border-gray-200 bg-gray-50'
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          {getIconComponent(achievement.icon_name)}
                          <div className="flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="font-medium">{achievement.name}</h4>
                              {isUnlocked && (
                                <Award className="text-green-500" size={16} />
                              )}
                            </div>
                            <p className="text-sm text-gray-600 mb-2">
                              {achievement.description}
                            </p>
                            <p className="text-xs text-blue-600 font-medium">
                              –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {getActionDescription(achievement.required_action, achievement.required_count)}
                            </p>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Titles Section */}
              <div>
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <Star className="mr-2 text-purple-500" size={24} />
                  –¢–∏—Ç—É–ª—ã
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {titles.map((title) => {
                    const isUnlocked = isTitleUnlocked(title.id);
                    const isSpecial = specialTitles.includes(title.name);
                    const requiredAchievement = title.required_achievement_id 
                      ? getRequiredAchievement(title.required_achievement_id)
                      : null;

                    return (
                      <div
                        key={title.id}
                        className={`p-4 rounded-lg border ${
                          isUnlocked
                            ? 'border-purple-500 bg-purple-50'
                            : isSpecial
                            ? 'border-yellow-500 bg-yellow-50'
                            : 'border-gray-200 bg-gray-50'
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          {isSpecial ? (
                            <Star className="text-yellow-500\" size={16} />
                          ) : (
                            <Star className={isUnlocked ? "text-purple-500" : "text-gray-400"} size={16} />
                          )}
                          <div className="flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="font-medium">{title.name}</h4>
                              {isUnlocked && (
                                <Star className="text-purple-500" size={16} />
                              )}
                              {isSpecial && !isUnlocked && (
                                <Lock className="text-yellow-500\" size={16} />
                              )}
                            </div>
                            <p className="text-sm text-gray-600 mb-2">
                              {title.description}
                            </p>
                            {isSpecial ? (
                              <p className="text-xs text-yellow-600 font-medium">
                                –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª - –≤—ã–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                              </p>
                            ) : requiredAchievement ? (
                              <p className="text-xs text-blue-600 font-medium">
                                –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "{requiredAchievement.name}"
                              </p>
                            ) : (
                              <p className="text-xs text-blue-600 font-medium">
                                –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Tips Section */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-semibold text-blue-800 mb-2">üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li>‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ñ–æ—Ä—É–º–µ - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</li>
                  <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–∞–π–∫–∞–º–∏</li>
                  <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∞–Ω–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</li>
                  <li>‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å —Å AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤</li>
                  <li>‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default AchievementRequirements;